{
  "name": "XHR.js",
  "description": "Super awesome HTTP Client for Appcelerator Titanium",
  "version": "2.1.0",
  "main": "XHR.js",
  "keywords": [
    "xhr",
    "http"
  ],
  "author": {
    "name": "Raul Riera & Rene Pot"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/raulriera/XHR.git"
  },
  "bugs": {
    "url": "https://github.com/raulriera/XHR/issues"
  },
  "homepage": "https://github.com/raulriera/XHR",
  "gitHead": "68e292a895a6cb353debdac5452cbed7666b0348",
  "readme": "# XHR:\nXHR is a wrapper around Titanium's HTTPClient. It works perfectly with REST API endpoints and has a built in cache system that you can use for your requests. But it also can be use for any HTTP requests, you can even cache remote images.\n\n## Usage:\nIn your app.js (or elsewhere), call:\n\n```javascript\n//init xhr.js\nvar XHR = require(\"xhr\");\nvar xhr = new XHR();\n```\n\nGET and DELETE calls share the same structure\n```javascript\nxhr.GET(\"http://freegeoip.net/json/\", onSuccessCallback, onErrorCallback, options);\nxhr.DELETE(\"http://freegeoip.net/json/\", onSuccessCallback, onErrorCallback, options);\n```\n\n POST and PUT also share structure, only 1 added field as opposed to GET/DELETE\n```javascript\nxhr.POST(\"http://freegeoip.net/json/\", data, onSuccessCallback, onErrorCallback, options);\nxhr.PUT(\"http://freegeoip.net/json/\", data, onSuccessCallback, onErrorCallback, options);\n```\n\n## Options\n\nIn the 4 API call methods you can set options, but doing this every time might be a bit frustrating. Especially if you want authentication for every API call. (or other options). You can set it globally like this\n\n```javascript\nxhr.setStaticOptions(options);\n```\n\nIf you do specify options in an API call, it will not ignore global options. This might be useful if all but 1 API call should be authenticated for example.\n\n### Available Options\n\n* `async` (default `true`) - If an API call should be async or not\n* `ttl` (default `false`) - Seconds the API response should be cached (only works with `GET()`\n* `shouldAuthenticate` (default `false`) - Should the call be made with authentication? BASIC Auth & oAuth supported\n* `oAuthToken` - oAuth token. Only works if `shouldAuthenticate` is `true`\n* `username` - Username for BASIC authentication. Only works if `shouldAuthenticate` is `true` and `oAuthToken` is not set\n* `password` - Password for BASIC authentication. See `username`\n* `contentType` (default `application/json`)- contentType for API call.\n* `parseJSON` (default `false`) - Should provided data for `POST()` and `PUT()` be stringified and response (for all methods) be parsed.\n* `returnXML` (default `false`) - Do you expect XML returned, put this to `true`\n* `debug` (default `false`) - Do you want `Ti.API.info` to show API calls made\n* `requestHeaders` (default `[]`) - Add custom request headers to the request\n\nFor some examples please check out the [examples.js](https://github.com/raulriera/XHR/blob/master/examples.js) file. Or browse around the [xhr.js](https://github.com/raulriera/XHR/blob/master/xhr.js) file. You can find in there support for GET, POST, PUT and DELETE\n\n### requestHeaders property\nTo add extra, custom, requestHeaders to the http request, you can set an array like this:\n\n```javascript\n    xhr.setStaticOptions({\n        requestHeaders: [\n            {\n                key: 'myCustomId',\n                value: 'myCustomValue'\n            }\n        ],\n        debug: true\n    });\n```\n\nThis will set the requestHeader like you would do previously:\n```js\n    xhr.setRequestHeader('myCustomId', 'myCustomValue');\n```\n\n## Helpers\nApart from the RESTful way of interacting with your API endpoints, this module also includes the following helper methods:\n\n### clear(url)\n\n* **url**: (required) The URL you want removed from the cache manager\n\nFinds the cached document of the given url (if any) and removes it from the cache manager. This method is useful if you are not satisfied with the results you got at the time.\n\n### clean()\nGoes through all the cached documents and delete everything that has been expired (if their TTL timestamp is less than the current time)\n\nThis method returns the count of deleted documents\n\n### purge()\nGoes through all the documents and deletes everything\n\nThis method returns the count of deleted documents\n\n## Backwards Compatibility\nPreviously `get`, `post`, `put` and `destroy` methods were used. They still work but are deprecated.\n\n## About:\nCreated by Raul Riera, [@raulriera](http://twitter.com/raulriera)  \n\nContributions by:\n\n* Daniel Tamas, [@dan_tamas](https://twitter.com/dan_tamas)\n* Bob Sims, [@2wheelsburning](https://twitter.com/2wheelsburning)\n* Mark Ross [@rossman66](https://github.com/rossman66)\n* Rene Pot, [@Wraldpyk](https://twitter.com/wraldpyk)\n",
  "readmeFilename": "README.md",
  "_id": "XHR.js@2.1.0",
  "_shasum": "4a5fbfd2f137b65e441b9442c822fb0c4c2cf784",
  "_from": "git+https://github.com/raulriera/XHR.git",
  "_resolved": "git+https://github.com/raulriera/XHR.git#68e292a895a6cb353debdac5452cbed7666b0348"
}
